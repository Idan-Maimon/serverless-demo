apiVersion: v1
data:
  .dockercfg: 
kind: Secret
metadata:
  annotations:
    kubernetes.io/service-account.name: kafka-cluster-kafka
    kubernetes.io/service-account.uid: d14fa6ab-dce5-46d5-962f-8b74284c0236
    openshift.io/token-secret.name: kafka-cluster-kafka-token-qxkhz
    openshift.io/token-secret.value: eyJhbGciOiJSUzI1NiIsImtpZCI6ImU3SlVpSmJKbnNnZktsZmJFdWhUbkxmOHMyWGp4b3NmVy1nN3BTQlUxN0UifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrYWZrYSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrYWZrYS1jbHVzdGVyLWthZmthLXRva2VuLXF4a2h6Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImthZmthLWNsdXN0ZXIta2Fma2EiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJkMTRmYTZhYi1kY2U1LTQ2ZDUtOTYyZi04Yjc0Mjg0YzAyMzYiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a2Fma2E6a2Fma2EtY2x1c3Rlci1rYWZrYSJ9.NzBQ2ws49JuRjCpSjlvozIQM-s3FobA455hNBwD837sd27al06YUyQD69QrCiYYNzrx-08o60mRIcl1OV-6rca5rn8AogkBnfTvZSf4apxHKONHBa1Ug3sT4NKcwqwlP9_RC64yiXV7d0XaEhHGpmckBoxREKNmKreTF5D5dqWgX4O6Q8r-uJff3XZnw2p8OVc7P033de34GY-7TAf4Cr9kHxgteX21yVX4H2GWCP5711zEHYtz5K13xXY2GQ9W9zi_LrkIWOCz2vypq5qJW2novuEKHZxUarfz5wXRffJUfwJOcdehgvy3SzYYyBCZGS3SPySUkSpJ2Jh1JLfo69OWrnoj8kZXZ4WXxp63PnYRBDlLB3PGOf0g8nBU3NXdt5O79jhxUQB6jkPZ-YCqoJyGLtxQrIM3ealjapziKtt16vVLNKqqiANF4_DIgbGgrI3Q1n9-eIXJYsqNriLrjRGOh4kBHaIshLiYtGq7VHq9Qg5jkvCfG_rb9Zjsz9BIA58WnV6CBYUaesKGeNnuTAp6-dWB3-LNJIrXbB7rHArBI1j4tu1E3SJr6iJGS43-4t-0DML5lui04Qi1eth6ig7XDATRP09e-63WH6iLVV4nkXUtJ6aCCYJH5Rl90guxV4yLf3nolIm9rnG0MOoqd2gR8lXFz1p3xuaFye793HGQ
  creationTimestamp: "2023-01-05T11:56:17Z"
  name: kafka-cluster-kafka-dockercfg-qnx5n
  namespace: kafka
  ownerReferences:
  - apiVersion: v1
    blockOwnerDeletion: false
    controller: true
    kind: Secret
    name: kafka-cluster-kafka-token-qxkhz
    uid: 53c5229b-490c-4219-a692-6e259f3ddf81
  resourceVersion: "151630"
  uid: 4494f065-edde-4d63-ab44-e834f799389f
type: kubernetes.io/dockercfg
